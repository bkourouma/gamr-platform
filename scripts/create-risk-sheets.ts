import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// Fonction pour calculer le score de risque GAMR
function calculateRiskScore(probability: number, vulnerability: number, impact: number): number {
  return (probability * vulnerability * impact) / 60 * 100
}

// Fonction pour d√©terminer la priorit√© bas√©e sur le score
function getPriorityFromScore(score: number): string {
  if (score >= 80) return 'CRITICAL'
  if (score >= 60) return 'HIGH'
  if (score >= 40) return 'MEDIUM'
  if (score >= 20) return 'LOW'
  return 'VERY_LOW'
}

async function createRiskSheets() {
  console.log('üéØ Cr√©ation de 6 fiches de risques bas√©es sur les √©valuations Gold Mines Inc...')

  try {
    // R√©cup√©rer les √©valuations Gold Mines Inc
    const evaluations = await prisma.evaluation.findMany({
      where: {
        title: {
          contains: 'Gold Mines Inc'
        },
        status: 'COMPLETED'
      },
      include: {
        responses: {
          include: {
            question: true
          }
        },
        evaluator: true,
        tenant: true
      }
    })

    if (evaluations.length === 0) {
      console.log('‚ùå Aucune √©valuation Gold Mines Inc trouv√©e')
      return
    }

    console.log(`üìä ${evaluations.length} √©valuations trouv√©es`)

    // D√©finir les 6 fiches de risques bas√©es sur l'analyse des √©valuations
    const riskSheetsData = [
      {
        target: "Acc√®s non autoris√© aux installations mini√®res",
        scenario: "Intrusion d'individus malveillants dans le p√©rim√®tre de la mine en raison de d√©faillances dans le syst√®me de contr√¥le d'acc√®s et de surveillance du p√©rim√®tre",
        probability: 2, // Probable
        vulnerability: 3, // Vuln√©rabilit√© √©lev√©e
        impact: 4, // Impact majeur
        category: "S√©curit√© Physique - P√©rim√®tre",
        tags: ["acc√®s", "p√©rim√®tre", "intrusion", "surveillance"],
        aiSuggestions: {
          recommendations: [
            "Renforcer le syst√®me de contr√¥le d'acc√®s avec badges RFID",
            "Installer des cam√©ras de surveillance suppl√©mentaires",
            "Mettre en place des rondes de s√©curit√© r√©guli√®res"
          ],
          confidence: 0.92
        }
      },
      {
        target: "√âquipements critiques d'extraction",
        scenario: "Sabotage ou vol d'√©quipements miniers critiques causant l'arr√™t de la production et des pertes financi√®res importantes",
        probability: 2, // Probable
        vulnerability: 4, // Vuln√©rabilit√© tr√®s √©lev√©e
        impact: 5, // Impact critique
        category: "S√©curit√© des Biens - √âquipements",
        tags: ["√©quipements", "sabotage", "vol", "production"],
        aiSuggestions: {
          recommendations: [
            "S√©curiser physiquement les √©quipements critiques",
            "Installer des syst√®mes d'alarme anti-intrusion",
            "Mettre en place une surveillance 24h/24"
          ],
          confidence: 0.88
        }
      },
      {
        target: "Personnel de s√©curit√©",
        scenario: "Formation insuffisante du personnel de s√©curit√© face aux menaces sp√©cifiques de l'industrie mini√®re, compromettant la capacit√© de r√©ponse aux incidents",
        probability: 3, // Tr√®s probable
        vulnerability: 3, // Vuln√©rabilit√© √©lev√©e
        impact: 3, // Impact mod√©r√©
        category: "S√©curit√© du Personnel - Formation",
        tags: ["formation", "personnel", "s√©curit√©", "r√©ponse"],
        aiSuggestions: {
          recommendations: [
            "Organiser des formations sp√©cialis√©es r√©guli√®res",
            "Cr√©er des proc√©dures d'urgence sp√©cifiques",
            "Effectuer des exercices de simulation"
          ],
          confidence: 0.85
        }
      },
      {
        target: "Syst√®mes informatiques et de communication",
        scenario: "Cyberattaque ciblant les syst√®mes de contr√¥le industriel et de communication, perturbant les op√©rations mini√®res et compromettant la s√©curit√©",
        probability: 2, // Probable
        vulnerability: 3, // Vuln√©rabilit√© √©lev√©e
        impact: 4, // Impact majeur
        category: "Cybers√©curit√© - Syst√®mes Critiques",
        tags: ["cybers√©curit√©", "syst√®mes", "communication", "contr√¥le"],
        aiSuggestions: {
          recommendations: [
            "Segmenter les r√©seaux industriels",
            "Mettre √† jour les syst√®mes de s√©curit√©",
            "Former le personnel aux bonnes pratiques cyber"
          ],
          confidence: 0.90
        }
      },
      {
        target: "Zones de stockage de mati√®res dangereuses",
        scenario: "Acc√®s non contr√¥l√© aux zones de stockage d'explosifs et de produits chimiques utilis√©s dans l'extraction, risquant un incident majeur",
        probability: 1, // Peu probable mais possible
        vulnerability: 4, // Vuln√©rabilit√© tr√®s √©lev√©e
        impact: 5, // Impact critique
        category: "S√©curit√© Chimique - Stockage",
        tags: ["explosifs", "chimiques", "stockage", "acc√®s"],
        aiSuggestions: {
          recommendations: [
            "Renforcer le contr√¥le d'acc√®s aux zones sensibles",
            "Installer des d√©tecteurs de mouvement",
            "Mettre en place un syst√®me de double authentification"
          ],
          confidence: 0.95
        }
      },
      {
        target: "Documentation et donn√©es sensibles",
        scenario: "Vol ou compromission de documents confidentiels contenant des informations sur les r√©serves, les proc√©d√©s et la s√©curit√© de l'entreprise",
        probability: 2, // Probable
        vulnerability: 2, // Vuln√©rabilit√© mod√©r√©e
        impact: 3, // Impact mod√©r√©
        category: "S√©curit√© de l'Information",
        tags: ["documents", "confidentialit√©", "donn√©es", "vol"],
        aiSuggestions: {
          recommendations: [
            "Chiffrer les documents sensibles",
            "Mettre en place un syst√®me de gestion documentaire s√©curis√©",
            "Limiter l'acc√®s selon le principe du moindre privil√®ge"
          ],
          confidence: 0.82
        }
      }
    ]

    // Utiliser la premi√®re √©valuation comme source
    const sourceEvaluation = evaluations[0]
    
    console.log(`\nüìù Cr√©ation des fiches de risques pour le tenant: ${sourceEvaluation.tenant.name}`)
    console.log(`üë§ Auteur: ${sourceEvaluation.evaluator.firstName} ${sourceEvaluation.evaluator.lastName}`)

    const createdRiskSheets = []

    for (const [index, riskData] of riskSheetsData.entries()) {
      const riskScore = calculateRiskScore(riskData.probability, riskData.vulnerability, riskData.impact)
      const priority = getPriorityFromScore(riskScore)

      const riskSheet = await prisma.riskSheet.create({
        data: {
          target: riskData.target,
          scenario: riskData.scenario,
          probability: riskData.probability,
          vulnerability: riskData.vulnerability,
          impact: riskData.impact,
          riskScore,
          priority: priority as any,
          category: riskData.category,
          tags: riskData.tags,
          aiSuggestions: riskData.aiSuggestions,
          tenantId: sourceEvaluation.tenantId,
          authorId: sourceEvaluation.evaluatorId,
          sourceEvaluationId: sourceEvaluation.id,
          reviewDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000) // +90 jours
        },
        include: {
          author: {
            select: {
              id: true,
              firstName: true,
              lastName: true,
              email: true
            }
          }
        }
      })

      createdRiskSheets.push(riskSheet)
      
      console.log(`‚úÖ Fiche ${index + 1}/6 cr√©√©e: ${riskSheet.target}`)
      console.log(`   Score: ${Math.round(riskScore)}/100 | Priorit√©: ${priority}`)
    }

    console.log(`\nüéâ ${createdRiskSheets.length} fiches de risques cr√©√©es avec succ√®s!`)
    
    // Afficher un r√©sum√©
    console.log(`\nüìä R√©sum√© des priorit√©s:`)
    const priorityCounts = createdRiskSheets.reduce((acc, sheet) => {
      acc[sheet.priority] = (acc[sheet.priority] || 0) + 1
      return acc
    }, {} as Record<string, number>)
    
    Object.entries(priorityCounts).forEach(([priority, count]) => {
      console.log(`   ${priority}: ${count} fiche${count > 1 ? 's' : ''}`)
    })

    return createdRiskSheets

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des fiches de risques:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createRiskSheets()
