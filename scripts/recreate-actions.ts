import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function recreateActions() {
  console.log('üóëÔ∏è Suppression de toutes les actions correctives existantes...')

  try {
    // 1. Supprimer toutes les actions existantes
    const deletedActions = await prisma.action.deleteMany({})
    console.log(`‚úÖ ${deletedActions.count} actions supprim√©es`)

    // 2. R√©cup√©rer toutes les fiches de risques existantes
    const riskSheets = await prisma.riskSheet.findMany({
      include: {
        author: {
          select: {
            id: true,
            firstName: true,
            lastName: true
          }
        },
        tenant: {
          select: {
            id: true,
            name: true
          }
        }
      },
      orderBy: [
        { priority: 'desc' },
        { riskScore: 'desc' }
      ]
    })

    console.log(`üìä ${riskSheets.length} fiches de risques trouv√©es`)

    if (riskSheets.length === 0) {
      console.log('‚ùå Aucune fiche de risque trouv√©e')
      return
    }

    // 3. D√©finir 10 actions correctives diversifi√©es
    const actionsTemplate = [
      {
        title: "Audit de s√©curit√© complet",
        description: "R√©aliser un audit de s√©curit√© approfondi pour identifier toutes les vuln√©rabilit√©s et points d'am√©lioration",
        priority: "HIGH" as const,
        daysFromNow: 14,
        estimatedCost: 15000,
        estimatedDuration: 7
      },
      {
        title: "Formation du personnel de s√©curit√©",
        description: "Organiser des sessions de formation sp√©cialis√©es pour le personnel de s√©curit√© sur les derni√®res menaces et proc√©dures",
        priority: "MEDIUM" as const,
        daysFromNow: 21,
        estimatedCost: 8000,
        estimatedDuration: 5
      },
      {
        title: "Mise √† jour des syst√®mes de surveillance",
        description: "Moderniser et √©tendre le syst√®me de vid√©osurveillance avec des cam√©ras haute d√©finition et d√©tection intelligente",
        priority: "HIGH" as const,
        daysFromNow: 30,
        estimatedCost: 25000,
        estimatedDuration: 10
      },
      {
        title: "Renforcement du contr√¥le d'acc√®s",
        description: "Installer des syst√®mes de contr√¥le d'acc√®s biom√©triques et des badges RFID pour s√©curiser les zones sensibles",
        priority: "HIGH" as const,
        daysFromNow: 35,
        estimatedCost: 20000,
        estimatedDuration: 12
      },
      {
        title: "Plan de continuit√© d'activit√©",
        description: "D√©velopper et tester un plan de continuit√© d'activit√© pour maintenir les op√©rations en cas d'incident majeur",
        priority: "MEDIUM" as const,
        daysFromNow: 45,
        estimatedCost: 12000,
        estimatedDuration: 20
      },
      {
        title: "S√©curisation des donn√©es sensibles",
        description: "Mettre en place un syst√®me de chiffrement et de sauvegarde s√©curis√©e pour prot√©ger les informations critiques",
        priority: "HIGH" as const,
        daysFromNow: 25,
        estimatedCost: 18000,
        estimatedDuration: 8
      },
      {
        title: "Exercices de simulation d'urgence",
        description: "Organiser des exercices r√©guliers de simulation d'incidents pour tester la r√©activit√© des √©quipes",
        priority: "MEDIUM" as const,
        daysFromNow: 28,
        estimatedCost: 5000,
        estimatedDuration: 3
      },
      {
        title: "Maintenance pr√©ventive des √©quipements",
        description: "√âtablir un programme de maintenance pr√©ventive pour tous les √©quipements de s√©curit√© critiques",
        priority: "MEDIUM" as const,
        daysFromNow: 40,
        estimatedCost: 10000,
        estimatedDuration: 15
      },
      {
        title: "Analyse des vuln√©rabilit√©s r√©seau",
        description: "Effectuer une analyse compl√®te des vuln√©rabilit√©s du r√©seau informatique et des syst√®mes connect√©s",
        priority: "HIGH" as const,
        daysFromNow: 20,
        estimatedCost: 22000,
        estimatedDuration: 6
      },
      {
        title: "Mise en conformit√© r√©glementaire",
        description: "Assurer la conformit√© avec toutes les r√©glementations de s√©curit√© applicables et obtenir les certifications n√©cessaires",
        priority: "CRITICAL" as const,
        daysFromNow: 60,
        estimatedCost: 30000,
        estimatedDuration: 25
      }
    ]

    console.log('\nüéØ Cr√©ation de 10 nouvelles actions correctives...')

    const createdActions = []

    for (let i = 0; i < Math.min(10, actionsTemplate.length); i++) {
      // S√©lectionner une fiche de risque (rotation pour distribuer les actions)
      const riskSheet = riskSheets[i % riskSheets.length]
      const actionTemplate = actionsTemplate[i]

      const dueDate = new Date()
      dueDate.setDate(dueDate.getDate() + actionTemplate.daysFromNow)

      const action = await prisma.action.create({
        data: {
          title: actionTemplate.title,
          description: actionTemplate.description,
          priority: actionTemplate.priority,
          dueDate: dueDate,
          estimatedCost: actionTemplate.estimatedCost,
          estimatedDuration: actionTemplate.estimatedDuration,
          status: 'TODO',
          tenantId: riskSheet.tenantId,
          riskSheetId: riskSheet.id,
          assigneeId: riskSheet.authorId
        },
        include: {
          assignee: {
            select: {
              firstName: true,
              lastName: true
            }
          },
          riskSheet: {
            select: {
              target: true,
              priority: true
            }
          }
        }
      })

      createdActions.push(action)

      console.log(`‚úÖ Action ${i + 1}/10: ${action.title}`)
      console.log(`   Priorit√©: ${action.priority} | √âch√©ance: ${action.dueDate?.toLocaleDateString('fr-FR')}`)
      console.log(`   Co√ªt: ${action.estimatedCost?.toLocaleString('fr-FR')}‚Ç¨ | Dur√©e: ${action.estimatedDuration} jours`)
      console.log(`   Fiche de risque: ${action.riskSheet?.target.substring(0, 40)}...`)
      console.log(`   Assign√© √†: ${action.assignee?.firstName} ${action.assignee?.lastName}`)
    }

    console.log(`\nüéâ ${createdActions.length} actions correctives cr√©√©es avec succ√®s!`)

    // 4. Statistiques
    console.log(`\nüìä Statistiques des nouvelles actions:`)
    
    const priorityStats = createdActions.reduce((acc, action) => {
      acc[action.priority] = (acc[action.priority] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    console.log(`R√©partition par priorit√©:`)
    Object.entries(priorityStats).forEach(([priority, count]) => {
      const emoji = priority === 'CRITICAL' ? 'üî¥' : 
                   priority === 'HIGH' ? 'üü†' : 
                   priority === 'MEDIUM' ? 'üü°' : 
                   priority === 'LOW' ? 'üü¢' : '‚ö™'
      console.log(`  ${emoji} ${priority}: ${count} action${count > 1 ? 's' : ''}`)
    })

    const totalCost = createdActions.reduce((sum, action) => sum + (action.estimatedCost || 0), 0)
    console.log(`\nüí∞ Co√ªt total estim√©: ${totalCost.toLocaleString('fr-FR')}‚Ç¨`)

    const avgDuration = createdActions.reduce((sum, action) => sum + (action.estimatedDuration || 0), 0) / createdActions.length
    console.log(`‚è±Ô∏è  Dur√©e moyenne: ${Math.round(avgDuration)} jours`)

    // 5. Actions prioritaires
    const criticalAndHighActions = createdActions.filter(a => a.priority === 'CRITICAL' || a.priority === 'HIGH')
    console.log(`\nüö® Actions prioritaires √† traiter en premier: ${criticalAndHighActions.length}`)
    
    criticalAndHighActions.slice(0, 3).forEach((action, index) => {
      console.log(`${index + 1}. ${action.title} (${action.priority})`)
      console.log(`   √âch√©ance: ${action.dueDate?.toLocaleDateString('fr-FR')}`)
    })

    // 6. R√©partition par tenant
    const tenantStats = createdActions.reduce((acc, action) => {
      const tenantName = riskSheets.find(r => r.id === action.riskSheetId)?.tenant.name || 'Inconnu'
      acc[tenantName] = (acc[tenantName] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    console.log(`\nüè¢ R√©partition par tenant:`)
    Object.entries(tenantStats).forEach(([tenant, count]) => {
      console.log(`  ${tenant}: ${count} action${count > 1 ? 's' : ''}`)
    })

    console.log(`\n‚úÖ Recr√©ation des actions termin√©e avec succ√®s!`)
    console.log(`üìÖ ${new Date().toLocaleDateString('fr-FR')} ${new Date().toLocaleTimeString('fr-FR')}`)

  } catch (error) {
    console.error('‚ùå Erreur lors de la recr√©ation des actions:', error)
  } finally {
    await prisma.$disconnect()
  }
}

recreateActions()
