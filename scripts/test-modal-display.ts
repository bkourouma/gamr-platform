import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testModalDisplay() {
  console.log('üîç Test de l\'affichage des modals - V√©rification des donn√©es...')

  try {
    // V√©rifier qu'il y a des actions √† afficher
    const actions = await prisma.action.findMany({
      include: {
        assignee: {
          select: {
            firstName: true,
            lastName: true,
            email: true
          }
        },
        riskSheet: {
          select: {
            target: true,
            priority: true,
            riskScore: true,
            category: true
          }
        }
      },
      take: 5,
      orderBy: {
        createdAt: 'desc'
      }
    })

    console.log(`\nüìä ${actions.length} actions trouv√©es pour les tests`)

    if (actions.length === 0) {
      console.log('‚ùå Aucune action trouv√©e - impossible de tester l\'affichage des modals')
      return
    }

    console.log(`\nüìã Actions disponibles pour test:`)
    console.log('=' .repeat(60))

    actions.forEach((action, index) => {
      console.log(`${index + 1}. ${action.title}`)
      console.log(`   Priorit√©: ${action.priority} | Status: ${action.status}`)
      console.log(`   Assign√© √†: ${action.assignee?.firstName} ${action.assignee?.lastName}`)
      console.log(`   Fiche de risque: ${action.riskSheet?.target || 'Non li√©e'}`)
      console.log(`   Cr√©√©e: ${action.createdAt.toLocaleDateString('fr-FR')}`)
      console.log('')
    })

    // V√©rifier les donn√©es n√©cessaires pour l'affichage complet
    console.log(`\nüîç V√©rification de la compl√©tude des donn√©es:`)
    console.log('-' .repeat(50))

    const actionsWithAllData = actions.filter(action => 
      action.title && 
      action.description && 
      action.assignee && 
      action.riskSheet
    )

    console.log(`Actions avec donn√©es compl√®tes: ${actionsWithAllData.length}/${actions.length}`)

    const actionsWithMetrics = actions.filter(action => 
      action.estimatedCost || action.estimatedDuration || action.successProbability
    )

    console.log(`Actions avec m√©triques: ${actionsWithMetrics.length}/${actions.length}`)

    const actionsWithDueDate = actions.filter(action => action.dueDate)
    console.log(`Actions avec √©ch√©ance: ${actionsWithDueDate.length}/${actions.length}`)

    // Recommandations pour les tests
    console.log(`\nüí° Recommandations pour tester l'affichage des modals:`)
    console.log('-' .repeat(50))

    if (actionsWithAllData.length > 0) {
      console.log(`‚úÖ Testez avec l'action: "${actionsWithAllData[0].title}"`)
      console.log(`   Cette action a toutes les donn√©es n√©cessaires pour un affichage complet`)
    }

    if (actionsWithMetrics.length > 0) {
      const actionWithMetrics = actionsWithMetrics[0]
      console.log(`‚úÖ Testez les m√©triques avec: "${actionWithMetrics.title}"`)
      if (actionWithMetrics.estimatedCost) {
        console.log(`   Co√ªt estim√©: ${actionWithMetrics.estimatedCost}‚Ç¨`)
      }
      if (actionWithMetrics.estimatedDuration) {
        console.log(`   Dur√©e estim√©e: ${actionWithMetrics.estimatedDuration} jours`)
      }
    }

    // V√©rifier les diff√©rents statuts pour tester les boutons d'action
    const statusCounts = actions.reduce((acc, action) => {
      acc[action.status] = (acc[action.status] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    console.log(`\nüìä R√©partition des statuts (pour tester les boutons d'action):`)
    Object.entries(statusCounts).forEach(([status, count]) => {
      const emoji = status === 'TODO' ? 'üìã' :
                   status === 'IN_PROGRESS' ? 'üîÑ' :
                   status === 'COMPLETED' ? '‚úÖ' : '‚ùå'
      console.log(`  ${emoji} ${status}: ${count}`)
    })

    // Instructions de test
    console.log(`\nüß™ Instructions de test:`)
    console.log('=' .repeat(50))
    console.log(`1. Ouvrez http://localhost:5174/actions`)
    console.log(`2. Cliquez sur l'ic√¥ne "üëÅÔ∏è" d'une action pour ouvrir la modal`)
    console.log(`3. V√©rifiez que la modal s'affiche enti√®rement √† l'√©cran`)
    console.log(`4. Testez la fermeture avec:`)
    console.log(`   - Le bouton X en haut √† droite`)
    console.log(`   - La touche √âchap`)
    console.log(`   - Un clic sur l'arri√®re-plan`)
    console.log(`5. Testez sur diff√©rentes tailles d'√©cran`)
    console.log(`6. V√©rifiez que le contenu est scrollable si n√©cessaire`)

    // Probl√®mes potentiels √† v√©rifier
    console.log(`\n‚ö†Ô∏è  Points √† v√©rifier:`)
    console.log('-' .repeat(30))
    console.log(`‚Ä¢ La modal ne d√©passe pas les bords de l'√©cran`)
    console.log(`‚Ä¢ Le contenu est lisible et bien organis√©`)
    console.log(`‚Ä¢ Les boutons d'action fonctionnent correctement`)
    console.log(`‚Ä¢ La sidebar s'affiche correctement sur grand √©cran`)
    console.log(`‚Ä¢ Le layout s'adapte sur mobile/tablette`)
    console.log(`‚Ä¢ Le scroll fonctionne si le contenu est long`)

    console.log(`\n‚úÖ Test de pr√©paration termin√©!`)
    console.log(`üìÖ ${new Date().toLocaleDateString('fr-FR')} ${new Date().toLocaleTimeString('fr-FR')}`)

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testModalDisplay()
