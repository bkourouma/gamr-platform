import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function seedQuestionnaire() {
  console.log('üå± D√©but du seeding du questionnaire d\'√©valuation...')

  // R√©cup√©rer le premier tenant disponible
  const tenant = await prisma.tenant.findFirst()
  if (!tenant) {
    console.error('‚ùå Aucun tenant trouv√©. Ex√©cutez d\'abord le seed principal.')
    return
  }

  console.log(`üìã Utilisation du tenant: ${tenant.name}`)

  // Cr√©er le template d'√©valuation principal
  const template = await prisma.evaluationTemplate.create({
    data: {
      name: '√âvaluation S√©curit√© et S√ªret√© Standard',
      description: 'Questionnaire complet d\'√©valuation s√©curitaire bas√© sur 42 objectifs',
      version: '1.0',
      targetSectors: ['Technologie', 'Sant√©', 'Finance', 'Industrie', 'Commerce'],
      companySize: ['TPE', 'PME', 'ETI', 'GE'],
      isDefault: true,
      tenantId: tenant.id
    }
  })

  console.log('üìã Template d\'√©valuation cr√©√©')

  // Section 1: Entit√©
  const entityGroup = await prisma.questionGroup.create({
    data: {
      title: 'Informations sur l\'entit√©',
      description: 'Informations de base sur l\'entreprise √©valu√©e',
      orderIndex: 1,
      icon: 'Building',
      color: 'primary',
      templateId: template.id
    }
  })

  const entityObjective = await prisma.objective.create({
    data: {
      title: 'Identification de l\'entit√©',
      description: 'Collecte des informations de base de l\'entreprise',
      orderIndex: 1,
      weight: 1.0,
      groupId: entityGroup.id
    }
  })

  // Questions de base pour l'entit√©
  const entityQuestions = [
    { text: 'Nom de l\'entit√©', type: 'TEXT', required: true },
    { text: 'Date de cr√©ation', type: 'DATE', required: true },
    { text: 'Nom du propri√©taire', type: 'TEXT', required: true },
    { text: 'Nom de la personne ressource', type: 'TEXT', required: true },
    { text: 'Adresse postale compl√®te', type: 'TEXT', required: true },
    { text: 'Num√©ro de t√©l√©phone', type: 'TEXT', required: true },
    { text: 'Adresse √©lectronique', type: 'TEXT', required: true },
    { text: 'Site internet', type: 'TEXT', required: false }
  ]

  for (let i = 0; i < entityQuestions.length; i++) {
    await prisma.question.create({
      data: {
        text: entityQuestions[i].text,
        type: entityQuestions[i].type as any,
        orderIndex: i + 1,
        isRequired: entityQuestions[i].required,
        objectiveId: entityObjective.id,
        weight: 1.0
      }
    })
  }

  // Section 2: Lignes de d√©fenses
  const defenseGroup = await prisma.questionGroup.create({
    data: {
      title: 'Lignes de d√©fenses',
      description: '√âvaluation des diff√©rentes lignes de d√©fense s√©curitaire',
      orderIndex: 2,
      icon: 'Shield',
      color: 'danger',
      templateId: template.id
    }
  })

  // Objectif 1: Voie d'acc√®s (Premi√®re ligne de d√©fense)
  const accessObjective = await prisma.objective.create({
    data: {
      title: 'DIAGNOSTIQUE SECURITAIRE DE LA VOIE D\'ACCES',
      description: '√âvaluation de la s√©curit√© de la voie d\'acc√®s principale',
      orderIndex: 1,
      weight: 2.0, // Poids plus √©lev√© car critique
      groupId: defenseGroup.id
    }
  })

  // Questions pour la voie d'acc√®s (√©chantillon des 27 questions)
  const accessQuestions = [
    'La voie d\'acc√®s √† votre entreprise est-elle une voie publique ?',
    'La voie d\'acc√®s a-t-elle un bitumage en bon √©tat ?',
    'La voie d\'acc√®s est-elle une voie √† double sens ?',
    'La voie d\'acc√®s est-elle sous vid√©o surveillance publique ?',
    'La voie d\'acc√®s est-elle une ligne droite ?',
    'La voie d\'acc√®s b√©n√©ficie-t-elle d\'un √©clairage ad√©quat ?',
    'La voie d\'acc√®s dispose-t-elle de ralentisseurs ?',
    'La voie d\'acc√®s b√©n√©ficie-t-elle d\'une bouche d\'incendie fonctionnelle ?'
  ]

  for (let i = 0; i < accessQuestions.length; i++) {
    await prisma.question.create({
      data: {
        text: accessQuestions[i],
        type: 'YES_NO',
        orderIndex: i + 1,
        isRequired: true,
        objectiveId: accessObjective.id,
        weight: 1.0,
        helpText: 'R√©pondez par Oui ou Non et ajoutez des pr√©cisions si n√©cessaire'
      }
    })
  }

  // Objectif 2: Cl√¥ture (Deuxi√®me ligne de d√©fense)
  const fenceObjective = await prisma.objective.create({
    data: {
      title: 'DIAGNOSTIQUE SECURITAIRE DE LA CLOTURE',
      description: '√âvaluation de la s√©curit√© du p√©rim√®tre et de la cl√¥ture',
      orderIndex: 2,
      weight: 2.0,
      groupId: defenseGroup.id
    }
  })

  const fenceQuestions = [
    'Le p√©rim√®tre de votre entreprise est-il cl√¥tur√© ?',
    'La cl√¥ture de votre entreprise atteint-elle 2m40 au moins ?',
    'Votre cl√¥ture comprend-elle un dispositif anti-intrusion ?',
    'Votre cl√¥ture a-t-elle d√©j√† √©t√© forc√©e par des tiers ?',
    'Des agents de s√©curit√© patrouillent-ils le p√©rim√®tre ?',
    'La cl√¥ture est-elle √©clair√©e ?',
    'La cl√¥ture dispose-t-elle de cam√©ras de surveillance fonctionnelles ?'
  ]

  for (let i = 0; i < fenceQuestions.length; i++) {
    await prisma.question.create({
      data: {
        text: fenceQuestions[i],
        type: 'YES_NO',
        orderIndex: i + 1,
        isRequired: true,
        objectiveId: fenceObjective.id,
        weight: 1.0
      }
    })
  }

  // Section 3: Infrastructures critiques
  const infraGroup = await prisma.questionGroup.create({
    data: {
      title: 'Infrastructures critiques',
      description: '√âvaluation des syst√®mes √©lectriques, eau et communication',
      orderIndex: 3,
      icon: 'Zap',
      color: 'warning',
      templateId: template.id
    }
  })

  // Objectif 16: Installation √©lectrique
  const electricObjective = await prisma.objective.create({
    data: {
      title: 'DIAGNOSTIQUE SECURITAIRE DE L\'INSTALLATION ELECTRIQUE',
      description: '√âvaluation de la s√©curit√© du syst√®me √©lectrique',
      orderIndex: 16,
      weight: 1.5,
      groupId: infraGroup.id
    }
  })

  const electricQuestions = [
    'Le principal point de raccordement au r√©seau √©lectrique est-il dans le p√©rim√®tre int√©rieur ?',
    'Le principal point de raccordement est-il prot√©g√© ?',
    'Le dispositif √©lectrique visible est-il bien isol√© ?',
    'Le syst√®me √©lectrique b√©n√©ficie-t-il d\'un dispositif antifoudre ?',
    'Votre entreprise dispose-t-elle d\'un g√©n√©rateur auxiliaire ?'
  ]

  for (let i = 0; i < electricQuestions.length; i++) {
    await prisma.question.create({
      data: {
        text: electricQuestions[i],
        type: 'YES_NO',
        orderIndex: i + 1,
        isRequired: true,
        objectiveId: electricObjective.id,
        weight: 1.0
      }
    })
  }

  // Section 4: Ergonomie et commodit√©s
  const ergoGroup = await prisma.questionGroup.create({
    data: {
      title: 'Ergonomie et commodit√©s',
      description: '√âvaluation du confort et de la salubrit√© des locaux',
      orderIndex: 4,
      icon: 'Users',
      color: 'success',
      templateId: template.id
    }
  })

  // Objectif 18: Mat√©riel de travail
  const workMaterialObjective = await prisma.objective.create({
    data: {
      title: 'DIAGNOSTIQUE SECURITAIRE DU MATERIEL DE TRAVAIL',
      description: '√âvaluation de l\'ergonomie du mat√©riel de travail',
      orderIndex: 18,
      weight: 1.0,
      groupId: ergoGroup.id
    }
  })

  const workMaterialQuestions = [
    'Les chaises et fauteuils, les bureaux de l\'entreprise sont-ils confortables ?',
    'Le mat√©riel de travail permet-il un rendu de travail efficient ?'
  ]

  for (let i = 0; i < workMaterialQuestions.length; i++) {
    await prisma.question.create({
      data: {
        text: workMaterialQuestions[i],
        type: 'YES_NO',
        orderIndex: i + 1,
        isRequired: true,
        objectiveId: workMaterialObjective.id,
        weight: 1.0
      }
    })
  }

  console.log('‚úÖ Questionnaire d\'√©valuation cr√©√© avec succ√®s!')
  console.log(`üìä Template ID: ${template.id}`)
  console.log('üéØ Sections cr√©√©es:')
  console.log('  - Informations sur l\'entit√©')
  console.log('  - Lignes de d√©fenses')
  console.log('  - Infrastructures critiques')
  console.log('  - Ergonomie et commodit√©s')
}

async function main() {
  try {
    await seedQuestionnaire()
  } catch (error) {
    console.error('‚ùå Erreur lors du seeding du questionnaire:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

main()
