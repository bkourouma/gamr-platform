import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function seedNotifications() {
  console.log('üîî Cr√©ation des notifications de test...')

  try {
    // R√©cup√©rer les tenants existants
    const tenants = await prisma.tenant.findMany()
    const users = await prisma.user.findMany()

    if (tenants.length === 0 || users.length === 0) {
      console.log('‚ùå Aucun tenant ou utilisateur trouv√©. Veuillez d\'abord ex√©cuter le seed principal.')
      return
    }

    const techCorpTenant = tenants.find(t => t.slug === 'techcorp')
    const healthCareTenant = tenants.find(t => t.slug === 'healthcare-plus')

    if (!techCorpTenant || !healthCareTenant) {
      console.log('‚ùå Tenants TechCorp ou HealthCare non trouv√©s.')
      return
    }

    // Notifications pour TechCorp Solutions
    const techCorpNotifications = [
      {
        title: 'üö® Risque Critique D√©tect√©',
        message: 'Un nouveau risque critique a √©t√© identifi√© concernant la s√©curit√© des serveurs. Score de risque: 85/100. Action imm√©diate requise.',
        type: 'RISK_CRITICAL',
        tenantId: techCorpTenant.id,
        userId: null, // Notification globale
        isRead: false
      },
      {
        title: '‚è∞ Action en Retard',
        message: 'L\'action "Mise √† jour des pare-feu" √©tait due le 15/01/2024. Veuillez mettre √† jour son statut.',
        type: 'ACTION_OVERDUE',
        tenantId: techCorpTenant.id,
        userId: users.find(u => u.email === 'admin@techcorp.com')?.id,
        isRead: false
      },
      {
        title: 'ü§ñ Analyse IA Termin√©e',
        message: 'L\'analyse pr√©dictive des risques cybers√©curit√© est termin√©e. 3 nouvelles vuln√©rabilit√©s potentielles d√©tect√©es.',
        type: 'AI_ALERT',
        tenantId: techCorpTenant.id,
        userId: users.find(u => u.email === 'analyst@techcorp.com')?.id,
        isRead: false
      },
      {
        title: 'üìã R√©vision Requise',
        message: 'La fiche de risque "Acc√®s physique aux locaux" n√©cessite une r√©vision. Derni√®re mise √† jour: 10/12/2023.',
        type: 'REVIEW_DUE',
        tenantId: techCorpTenant.id,
        userId: users.find(u => u.email === 'evaluator@techcorp.com')?.id,
        isRead: true
      },
      {
        title: 'üîó Corr√©lation de Risques D√©tect√©e',
        message: 'Une forte corr√©lation (78%) a √©t√© d√©tect√©e entre "Panne √©lectrique" et "Perte de donn√©es". Analyse recommand√©e.',
        type: 'CORRELATION_ALERT',
        tenantId: techCorpTenant.id,
        userId: null,
        isRead: false
      },
      {
        title: '‚öôÔ∏è Mise √† Jour Syst√®me',
        message: 'La plateforme GAMR a √©t√© mise √† jour vers la version 3.1. Nouvelles fonctionnalit√©s disponibles.',
        type: 'SYSTEM',
        tenantId: techCorpTenant.id,
        userId: null,
        isRead: true
      }
    ]

    // Notifications pour HealthCare Plus
    const healthCareNotifications = [
      {
        title: 'üö® Risque Critique - Donn√©es Patients',
        message: 'Risque critique identifi√©: acc√®s non autoris√© aux dossiers patients. Score: 92/100. Intervention urgente n√©cessaire.',
        type: 'RISK_CRITICAL',
        tenantId: healthCareTenant.id,
        userId: null,
        isRead: false
      },
      {
        title: 'üìã Audit de Conformit√© RGPD',
        message: 'L\'audit de conformit√© RGPD est programm√© pour la semaine prochaine. Veuillez pr√©parer les documents requis.',
        type: 'REVIEW_DUE',
        tenantId: healthCareTenant.id,
        userId: users.find(u => u.email === 'admin@healthcare-plus.com')?.id,
        isRead: false
      },
      {
        title: 'ü§ñ D√©tection d\'Anomalie',
        message: 'L\'IA a d√©tect√© une anomalie dans les patterns d\'acc√®s aux syst√®mes. Analyse en cours.',
        type: 'AI_ALERT',
        tenantId: healthCareTenant.id,
        userId: null,
        isRead: false
      },
      {
        title: '‚è∞ Formation S√©curit√© en Retard',
        message: 'La formation s√©curit√© du personnel √©tait due le 20/01/2024. 15 employ√©s n\'ont pas encore compl√©t√© le module.',
        type: 'ACTION_OVERDUE',
        tenantId: healthCareTenant.id,
        userId: users.find(u => u.email === 'evaluator@healthcare-plus.com')?.id,
        isRead: true
      }
    ]

    // Cr√©er toutes les notifications
    const allNotifications = [...techCorpNotifications, ...healthCareNotifications]

    for (const notificationData of allNotifications) {
      await prisma.notification.create({
        data: {
          ...notificationData,
          createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000), // Derniers 7 jours
          readAt: notificationData.isRead ? new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000) : null
        }
      })
    }

    console.log(`‚úÖ ${allNotifications.length} notifications cr√©√©es avec succ√®s`)

    // Statistiques
    const stats = await prisma.notification.groupBy({
      by: ['type'],
      _count: true
    })

    console.log('\nüìä Statistiques des notifications:')
    stats.forEach(stat => {
      console.log(`   ${stat.type}: ${stat._count} notifications`)
    })

    const unreadCount = await prisma.notification.count({
      where: { isRead: false }
    })

    console.log(`\nüîî ${unreadCount} notifications non lues`)

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des notifications:', error)
    throw error
  }
}

async function main() {
  try {
    await seedNotifications()
  } catch (error) {
    console.error('Erreur:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter si c'est le fichier principal
main()

export { seedNotifications }
