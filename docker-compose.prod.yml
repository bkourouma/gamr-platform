version: '3.8'

services:
  gamr-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gamr-platform
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=file:/app/data/prod.db
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=100
    volumes:
      # Persistent storage for SQLite database
      - gamr-data:/app/data
      # Optional: Mount logs directory
      - gamr-logs:/app/logs
    networks:
      - gamr-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: gamr-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - gamr-logs:/var/log/nginx
    depends_on:
      - gamr-app
    networks:
      - gamr-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: PostgreSQL for production (alternative to SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: gamr-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-gamr}
      - POSTGRES_USER=${POSTGRES_USER:-gamr}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - gamr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gamr}"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - postgres

volumes:
  gamr-data:
    driver: local
  gamr-logs:
    driver: local
  postgres-data:
    driver: local

networks:
  gamr-network:
    driver: bridge
